{"version":3,"sources":["webpack://identitadigitale/./src/components/AccordionEntry.js","webpack://identitadigitale/./src/components/glossary/GlossaryTerm.js","webpack://identitadigitale/./src/components/glossary/Glossary.js","webpack://identitadigitale/./src/layouts/GlossaryPage.js","webpack://identitadigitale/./src/pages/glossario.js","webpack://identitadigitale/./src/utils/proptypes.js"],"names":["AccordionEntry","active","onToggle","header","body","headerClassName","bodyClassName","headerLang","undefined","lang","className","classNames","useStyles","createUseStyles","list","ul","paddingLeft","li","marginBottom","color","GlossaryTerm","term","expandAndScrollIntoView","classes","useState","expanded","setExpanded","useEffect","setTimeout","document","getElementById","id","scrollIntoView","block","inline","name","dangerouslySetInnerHTML","__html","description","GlossaryTerms","terms","expandTerm","map","key","Glossary","firstColumn","slice","length","secondColumn","title","content","glossaryTerms","seo","seoTitle","seoDescription","glossaryTermsSorted","sort","a","b","aName","toUpperCase","bName","GlossaryPage","expandedTermOnInit","setExpandedTermOnInit","termId","location","hash","replace","some","SEO","Hero","HeroTitle","Tag","HeroBody","html","bgColor","referencePropType","PropTypes","action","ariaLabel","ariaLabelIcon","icon","link","references","isRequired"],"mappings":"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","file":"component---src-pages-glossario-js-57e59a55d60a72f16b98.js","sourcesContent":["import React from 'react';\nimport { AccordionBody, AccordionHeader } from 'design-react-kit';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const AccordionEntry = ({\n  active,\n  onToggle,\n  header,\n  body,\n  headerClassName = '',\n  bodyClassName = '',\n  headerLang = undefined,\n}) => (\n  <>\n    <AccordionHeader\n      active={active}\n      onToggle={onToggle}\n      lang={headerLang}\n      className={classNames(headerClassName, { 'text-dark': active })}\n    >\n      {header()}\n    </AccordionHeader>\n    <AccordionBody active={active} className={bodyClassName}>\n      {body()}\n    </AccordionBody>\n  </>\n);\n\nAccordionEntry.propTypes = {\n  active: PropTypes.bool.isRequired,\n  onToggle: PropTypes.func.isRequired,\n  header: PropTypes.func.isRequired,\n  headerClassName: PropTypes.string,\n  headerLang: PropTypes.string,\n  body: PropTypes.func.isRequired,\n  bodyClassName: PropTypes.string,\n};\n","import React, { useEffect, useState } from 'react';\nimport { Accordion } from 'design-react-kit';\nimport PropTypes from 'prop-types';\nimport { createUseStyles } from 'react-jss';\nimport { AccordionEntry } from '../AccordionEntry.js';\nimport { glossaryTermPropTypes } from '../../utils/proptypes.js';\n\nconst useStyles = createUseStyles({\n  list: {\n    '@global': {\n      ul: {\n        paddingLeft: '24px',\n      },\n      li: {\n        marginBottom: '16px',\n      },\n      'li::marker': {\n        color: 'var(--primary)',\n      },\n    },\n  },\n});\n\nexport const GlossaryTerm = ({ term, expandAndScrollIntoView = false }) => {\n  const classes = useStyles();\n  const [expanded, setExpanded] = useState(expandAndScrollIntoView);\n  useEffect(() => {\n    if (expandAndScrollIntoView) {\n      setExpanded(true);\n      // We need to wait for animation in order to center the term properly\n      setTimeout(\n        () =>\n          document.getElementById(term.id)?.scrollIntoView({\n            block: 'center',\n            inline: 'center',\n          }),\n        300\n      );\n    }\n  }, [expandAndScrollIntoView, term.id]);\n\n  return (\n    <Accordion id={term.id} className={`bg-white shadow-lg my-0 my-lg-3 mx-0 mx-lg-2 ${classes.list}`}>\n      <AccordionEntry\n        headerLang=\"en\"\n        headerClassName=\"border-0\"\n        active={expanded}\n        onToggle={() => setExpanded(!expanded)}\n        header={() => term.name}\n        body={() => <span dangerouslySetInnerHTML={{ __html: term.description }} />}\n      />\n    </Accordion>\n  );\n};\n\nGlossaryTerm.propTypes = {\n  term: glossaryTermPropTypes,\n  expandAndScrollIntoView: PropTypes.bool,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { glossaryTermPropTypes } from '../../utils/proptypes.js';\nimport { GlossaryTerm } from './GlossaryTerm.js';\n\nconst GlossaryTerms = ({ terms, expandTerm }) =>\n  terms.map((term) => <GlossaryTerm key={term.id} term={term} expandAndScrollIntoView={term.id === expandTerm} />);\n\nexport const Glossary = ({ terms, expandTerm }) => {\n  const firstColumn = terms.slice(0, terms.length / 2);\n  const secondColumn = terms.slice(terms.length / 2, terms.length);\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <GlossaryTerms terms={firstColumn} expandTerm={expandTerm} />\n        </div>\n        <div className=\"col-lg-6\">\n          <GlossaryTerms terms={secondColumn} expandTerm={expandTerm} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nGlossary.propTypes = {\n  terms: PropTypes.arrayOf(glossaryTermPropTypes),\n  expandTerm: PropTypes.string,\n};\n","import React, { useEffect, useState } from 'react';\nimport content from '../../contents/glossary-page/glossary.yml';\nimport { HeroTitle } from '../components/hero/HeroTitle.js';\nimport { HeroBody } from '../components/hero/HeroBody.js';\nimport { Hero } from '../components/hero/Hero.js';\nimport { Glossary } from '../components/glossary/Glossary.js';\nimport { SEO } from '../components/SEO.js';\nimport seo from '../../contents/seo.yml';\n\nconst { title, body, glossaryTerms } = content;\nconst { title: seoTitle, description: seoDescription } = seo.glossaryPage;\n\nconst sortTermsByName = (terms) =>\n  terms.sort((a, b) => {\n    const aName = a.name.toUpperCase();\n    const bName = b.name.toUpperCase();\n    if (aName < bName) {\n      return -1;\n    }\n    if (aName > bName) {\n      return 1;\n    }\n    return 0;\n  });\n\nconst glossaryTermsSorted = sortTermsByName(glossaryTerms);\n\nexport const GlossaryPage = () => {\n  const [expandedTermOnInit, setExpandedTermOnInit] = useState(null);\n  useEffect(() => {\n    // This useEffect is used to understand if there is an expanded term in the page on init, based on the term id in the url hash.\n    // Due to the fact that the url hash depends on the client, this computation can't be done in the SSR phase.\n    const termId = location.hash.replace('#', '');\n    if (glossaryTermsSorted.some((term) => term.id === termId)) {\n      setExpandedTermOnInit(termId);\n    }\n  }, []);\n  return (\n    <>\n      <SEO title={seoTitle} description={seoDescription} />\n      <Hero>\n        <div className=\"row align-items-center\">\n          <div className=\"offset-lg-1 col-lg-6 mt-4 mt-lg-0\">\n            <div className=\"text-center text-lg-left\">\n              <HeroTitle title={title} className=\"text-info\" Tag=\"h1\" />\n              <HeroBody html={body} />\n            </div>\n          </div>\n        </div>\n      </Hero>\n      <Hero bgColor=\"light\">\n        <div className=\"row align-items-center\">\n          <div className=\"offset-lg-1 col-lg-10 mt-4 mt-lg-0\">\n            <Glossary terms={glossaryTermsSorted} expandTerm={expandedTermOnInit} />\n          </div>\n        </div>\n      </Hero>\n    </>\n  );\n};\n","import React from 'react';\nimport { GlossaryPage } from '../layouts/GlossaryPage.js';\n\nconst Page = () => <GlossaryPage />;\nexport default Page;\n","import PropTypes from 'prop-types';\n\nexport const referencePropType = PropTypes.exact({\n  action: PropTypes.string.isRequired,\n  ariaLabel: PropTypes.string.isRequired,\n  ariaLabelIcon: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  icon: PropTypes.string.isRequired,\n  link: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n});\n\nexport const resourcePropType = PropTypes.exact({\n  title: PropTypes.string,\n  references: PropTypes.arrayOf(referencePropType).isRequired,\n});\n\nexport const glossaryTermPropTypes = PropTypes.exact({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n});\n"],"sourceRoot":""}